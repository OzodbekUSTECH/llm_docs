import base64
import os
from dishka import Provider, Scope, provide, provide_all

from sentence_transformers import SentenceTransformer
from qdrant_client import AsyncQdrantClient
from transformers import AutoTokenizer
from app.core.config import settings
from ollama import AsyncClient
from docling.document_converter import DocumentConverter
from docling.datamodel.base_models import InputFormat
from docling.datamodel.pipeline_options import PdfPipelineOptions, TesseractCliOcrOptions, RapidOcrOptions, EasyOcrOptions
from docling.document_converter import PdfFormatOption
from docling.datamodel.accelerator_options import AcceleratorDevice, AcceleratorOptions
from docling_core.transforms.chunker.tokenizer.huggingface import HuggingFaceTokenizer
from docling.chunking import HybridChunker
from openai import AsyncOpenAI
from app.services.extract_text_from_file import DocumentParserOpenAI
from app.services.keyword_extractor import KeywordExtractor
from app.services.contract_section_extractor import ContractSectionExtractor
from huggingface_hub import snapshot_download

class UtilsProvider(Provider):
    """
    Provider –¥–ª—è —É—Ç–∏–ª–∏—Ç: —ç–º–±–µ–¥–¥–∏–Ω–≥–∏, Qdrant, Docling, chunking.
    –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤–º–µ—Å—Ç–µ.
    
    –û–°–û–ë–ï–ù–ù–û–°–¢–ò OCR –ù–ê–°–¢–†–û–ï–ö –î–õ–Ø –¢–ê–ë–õ–ò–¶:
    - –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Ö–∏–º–∏—á–µ—Å–∫–∏—Ö —Ñ–æ—Ä–º—É–ª –∏ —á–∏—Å–ª–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    - –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—É–ª (do_formula_enrichment) –∏ –∫–æ–¥–∞ (do_code_enrichment)
    - –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –º–∞—Å—à—Ç–∞–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (2x) –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
    - –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥ –ø–ª–æ—â–∞–¥–∏ (1%) –¥–ª—è –º–µ–ª–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
    - –û—Ç–∫–ª—é—á–µ–Ω–∏–µ cell_matching –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü
    - –¢–æ—á–Ω—ã–π —Ä–µ–∂–∏–º TableFormer –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
    - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–∞–±–ª–∏—Ü –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    - –î–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ OCR: RapidOCR (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) –∏ Tesseract (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞)
    - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ö–∏–º–∏—á–µ—Å–∫–∏—Ö —Ñ–æ—Ä–º—É–ª –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    """
    scope = Scope.APP
    
    utils = provide_all(
        KeywordExtractor,
        ContractSectionExtractor,
        DocumentParserOpenAI,
    )
    
    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
    EMBEDDING_MODEL = "intfloat/e5-base-v2"
    EMBEDDING_DIMENSION = 768  # e5-base-v2 –∏–º–µ–µ—Ç 768 –∏–∑–º–µ—Ä–µ–Ω–∏—è
    MAX_CHUNK_TOKENS = 512  # –ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤ –≤ —á–∞–Ω–∫–µ
    CHUNK_OVERLAP_TOKENS = 64  # –ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    
    @provide
    def provide_sentence_transformer(self) -> SentenceTransformer:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤.
        intfloat/e5-large-v2 - –æ–¥–Ω–∞ –∏–∑ –ª—É—á—à–∏—Ö open-source –º–æ–¥–µ–ª–µ–π.
        """
        print(f"üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {self.EMBEDDING_MODEL}")
        return SentenceTransformer(self.EMBEDDING_MODEL)
    
    @provide
    def provide_qdrant_client(self) -> AsyncQdrantClient:
        """–°–æ–∑–¥–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è Qdrant –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î."""
        print(f"üîÑ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Qdrant: {settings.QDRANT_HOST}:{settings.QDRANT_PORT}")
        return AsyncQdrantClient(
            host=settings.QDRANT_HOST,
            port=settings.QDRANT_PORT,
        )
   
    @provide
    def provide_ollama_client(self) -> AsyncClient:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç –¥–ª—è Ollama LLM."""
        userpass = "goodman:password4ollama"
        auth = base64.b64encode(userpass.encode()).decode()
        client = AsyncClient(
            host="https://ollama.technocrats.uz",
            headers={"Authorization": f"Basic {auth}"}
        )
        print(f"üîÑ Ollama –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: https://ollama.technocrats.uz")
        return client
    
    @provide
    def provide_accelerator_options(self) -> AcceleratorOptions:
        """
        –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç accelerator –¥–ª—è Docling —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º CUDA.
        RTX 4060 —Å 8GB VRAM - –æ—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è OCR.
        """
        return AcceleratorOptions(
            device=AcceleratorDevice.CUDA,  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º CUDA
            num_threads=8,  # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è RTX 4060
            cuda_use_flash_attention2=True,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º Flash Attention –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        )
    
    @provide
    def provide_pdf_pipeline_options(self) -> PdfPipelineOptions:
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∏ pipeline –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º OCR.
        –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü —Å —Ö–∏–º–∏—á–µ—Å–∫–∏–º–∏ —Ñ–æ—Ä–º—É–ª–∞–º–∏.
        """
        pipeline_options = PdfPipelineOptions()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OCR –∏ —Ç–∞–±–ª–∏—Ü —Å GPU –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
        pipeline_options.do_ocr = True  # –í–∫–ª—é—á–∞–µ–º OCR –¥–ª—è –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö PDF
        pipeline_options.do_table_structure = True  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü
        pipeline_options.do_formula_enrichment = True  # –í–∫–ª—é—á–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—É–ª
        pipeline_options.do_code_enrichment = True  # –í–∫–ª—é—á–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∫–æ–¥–∞/—Å–∏–º–≤–æ–ª–æ–≤
        pipeline_options.table_structure_options.do_cell_matching = True  # –í–∫–ª—é—á–∞–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —è—á–µ–µ–∫
        
        # GPU –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        pipeline_options.images_scale = 2.0  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∞—Å—à—Ç–∞–± –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        pipeline_options.generate_page_images = True  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
        pipeline_options.generate_table_images = True  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü

        # pipeline_options.accelerator_options = AcceleratorOptions(
        #     device=AcceleratorDevice.AUTO,  # –ê–≤—Ç–æ–≤—ã–±–æ—Ä: CUDA > MPS > CPU
        # )
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
        # –£–±–∏—Ä–∞–µ–º mode —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç Pydantic warning
        
        # # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        # pipeline_options.images_scale = 2.0  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∞—Å—à—Ç–∞–± –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        # pipeline_options.generate_page_images = True  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
        # pipeline_options.generate_table_images = True  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OCR –¥–ª—è —Ö–∏–º–∏—á–µ—Å–∫–∏—Ö —Ñ–æ—Ä–º—É–ª –∏ —Ç–∞–±–ª–∏—Ü
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º EasyOCR –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
        # ocr_options = EasyOcrOptions(
        #     lang=["ru", "en"],                 # —è–∑—ã–∫–∏: —Ä—É—Å—Å–∫–∏–π –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π (–∫–∏—Ç–∞–π—Å–∫–∏–π –Ω–µ –Ω—É–∂–µ–Ω)
        #     force_full_page_ocr=True,          # —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –≤—Å—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ü–µ–ª–∏–∫–æ–º (–ª—É—á—à–µ –¥–ª—è —Å–∫–∞–Ω–æ–≤)
        #     bitmap_area_threshold=0.005,       # –µ—â–µ –±–æ–ª–µ–µ –Ω–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è –º–µ–ª–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
        #     # –£–±–∏—Ä–∞–µ–º use_gpu —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ deprecated - GPU —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ accelerator_options
        #     confidence_threshold=0.3,          # –µ—â–µ –±–æ–ª–µ–µ –º—è–≥–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è —Ç–∞–±–ª–∏—Ü
        #     model_storage_directory="./models",# –≥–¥–µ —Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ EasyOCR
        #     recog_network="standard",          # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å–µ—Ç—å (–º–æ–∂–Ω–æ 'latin_g2' –¥–ª—è —Å–º–µ—à–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤)
        #     download_enabled=True,             # —Ä–∞–∑—Ä–µ—à–∏—Ç—å –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–µ–π
        #     suppress_mps_warnings=True         # —É–±—Ä–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è macOS MPS
        # )
        
        download_path = snapshot_download(repo_id="SWHL/RapidOCR")

        # Setup RapidOcrOptions for english detection
        det_model_path = os.path.join(
            download_path, "PP-OCRv4", "en_PP-OCRv3_det_infer.onnx"
        )
        rec_model_path = os.path.join(
            download_path, "PP-OCRv4", "ch_PP-OCRv4_rec_server_infer.onnx"
        )
        cls_model_path = os.path.join(
            download_path, "PP-OCRv3", "ch_ppocr_mobile_v2.0_cls_train.onnx"
        )
        ocr_options = RapidOcrOptions(
            det_model_path=det_model_path,
            rec_model_path=rec_model_path,
            cls_model_path=cls_model_path,
            # CUDA settings for RTX 4060
            backend="onnxruntime",  # ONNX Runtime with CUDA support
            lang=["english"],  # English language for better performance
            force_full_page_ocr=True,  # OCR entire page
            bitmap_area_threshold=0.01,  # Low threshold for small text
            text_score=0.3,  # Confidence threshold
            use_det=True,  # Enable text detection
            use_cls=True,  # Enable text classification
            use_rec=True,  # Enable text recognition
            print_verbose=False,  # Disable verbose logging
        )
        
        pipeline_options.ocr_options = ocr_options
        
        pipeline_options.accelerator_options = AcceleratorOptions(
            num_threads=8,  # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è RTX 4060
            device=AcceleratorDevice.CUDA,  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º CUDA
            cuda_use_flash_attention2=True,  # Flash Attention –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        )
        

        return pipeline_options
    
    # @provide
    # def provide_pdf_pipeline_options_tesseract(self) -> PdfPipelineOptions:
    #     """
    #     –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å Tesseract –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ RapidOCR –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.
    #     –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü —Å —Ö–∏–º–∏—á–µ—Å–∫–∏–º–∏ —Ñ–æ—Ä–º—É–ª–∞–º–∏.
    #     """
    #     pipeline_options = PdfPipelineOptions()
        
    #     # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OCR –∏ —Ç–∞–±–ª–∏—Ü
        # pipeline_options.do_ocr = True  # –í–∫–ª—é—á–∞–µ–º OCR –¥–ª—è –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö PDF
        # pipeline_options.do_table_structure = True  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü
    #     pipeline_options.do_formula_enrichment = True  # –í–∫–ª—é—á–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—É–ª
    #     pipeline_options.do_code_enrichment = True  # –í–∫–ª—é—á–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∫–æ–¥–∞/—Å–∏–º–≤–æ–ª–æ–≤
        
    #     # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
    #     pipeline_options.table_structure_options.do_cell_matching = False  # –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    #     # pipeline_options.table_structure_options.mode = "accurate"  # –¢–æ—á–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è —Ç–∞–±–ª–∏—Ü
        
    #     # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
    #     # pipeline_options.images_scale = 2.0  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∞—Å—à—Ç–∞–± –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
    #     pipeline_options.generate_page_images = True  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
    #     pipeline_options.generate_table_images = True  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü
        
    #     # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Tesseract OCR –¥–ª—è —Ö–∏–º–∏—á–µ—Å–∫–∏—Ö —Ñ–æ—Ä–º—É–ª –∏ —Ç–∞–±–ª–∏—Ü
    #     ocr_options = TesseractCliOcrOptions(
    #         force_full_page_ocr=True,  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ OCR –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    #         # –Ø–∑—ã–∫–∏ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π + —Ä—É—Å—Å–∫–∏–π –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ñ–æ—Ä–º—É–ª)
    #         lang=["eng", "rus"],
    #         # –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –º–µ–ª–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
    #         bitmap_area_threshold=0.01,  # 1% - –æ—á–µ–Ω—å –Ω–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è –º–µ–ª–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    #         # –ü—É—Ç—å –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É Tesseract
    #         tesseract_cmd="tesseract",
    #         # –ü—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º Tesseract (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    #         path=None
    #     )
    #     pipeline_options.ocr_options = ocr_options

    #     return pipeline_options
    
    @provide
    def provide_document_converter(
        self, 
        pipeline_options: PdfPipelineOptions, 
    ) -> DocumentConverter:
        """
        –°–æ–∑–¥–∞–µ—Ç DocumentConverter —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º OCR-–¥–≤–∏–∂–∫–∞ RapidOCR.
        """
        print(f"üîÑ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Docling DocumentConverter")

        # –ü—Ä–∏–º–µ–Ω—è–µ–º accelerator –∫ pipeline_options

        converter = DocumentConverter(
            format_options={
                InputFormat.PDF: PdfFormatOption(
                    pipeline_options=pipeline_options,
                )
            },
        )
        return converter
    
    @provide
    def provide_huggingface_tokenizer(self) -> HuggingFaceTokenizer:
        """
        –°–æ–∑–¥–∞–µ—Ç tokenizer –¥–ª—è HybridChunker.
        –í–ê–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç—É –∂–µ –º–æ–¥–µ–ª—å —á—Ç–æ –∏ –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤!
        """
        print(f"üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º tokenizer: {self.EMBEDDING_MODEL}")
        return HuggingFaceTokenizer(
            tokenizer=AutoTokenizer.from_pretrained(self.EMBEDDING_MODEL),
            max_tokens=self.MAX_CHUNK_TOKENS  # –ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤ –≤ —á–∞–Ω–∫–µ
        )
    
    @provide
    def provide_docling_chunker(self, tokenizer: HuggingFaceTokenizer) -> HybridChunker:
        """
        –°–æ–∑–¥–∞–µ—Ç HybridChunker –¥–ª—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
        
        HybridChunker:
        - –£–≤–∞–∂–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–∑–∞–≥–æ–ª–æ–≤–∫–∏, –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã)
        - –î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∫ —á–∞–Ω–∫–∞–º
        - –£—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã, –∞ –Ω–µ —Å–∏–º–≤–æ–ª—ã
        - –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –º–∞–ª–µ–Ω—å–∫–∏–µ —á–∞–Ω–∫–∏ (merge_peers=True)
        """
        print(f"üîÑ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º HybridChunker: max_tokens={self.MAX_CHUNK_TOKENS}, merge_peers=True")
        
        return HybridChunker(
            tokenizer=tokenizer,
            merge_peers=True,  # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ –º–∞–ª–µ–Ω—å–∫–∏–µ —á–∞–Ω–∫–∏
        )
    
    
    @provide
    def provide_openai_client(self) -> AsyncOpenAI:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç –¥–ª—è OpenAI."""
        return AsyncOpenAI(api_key=settings.OPENAI_API_KEY)
    
    
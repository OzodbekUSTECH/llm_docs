
from qdrant_client import AsyncQdrantClient
from qdrant_client.http.models import VectorParams, Distance
from app.core.config import settings
from dishka import AsyncContainer
from sentence_transformers import SentenceTransformer
from docling.chunking import HybridChunker


async def init_qdrant_collection():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏—é –≤ Qdrant"""
    client = AsyncQdrantClient(
        host=settings.QDRANT_HOST,
        port=settings.QDRANT_PORT,
    )
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—è
        collections = await client.get_collections()
        collection_names = [col.name for col in collections.collections]
        
        if "document_embeddings" not in collection_names:
            print("Creating Qdrant collection 'document_embeddings'...")
            await client.create_collection(
                collection_name="document_embeddings",
                vectors_config=VectorParams(
                    size=768,
                    distance=Distance.COSINE,
                ),
                on_disk_payload=True,
            )
            print("Collection created successfully!")
        else:
            print("Collection 'document_embeddings' already exists")
            
    except Exception as e:
        print(f"Error initializing Qdrant collection: {e}")
    finally:
        await client.close()


async def warmup_dependencies(container: AsyncContainer):
    print("üöÄ –ü—Ä–æ–≥—Ä–µ–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, —á—Ç–æ–±—ã –∑–∞—Å—Ç–∞–≤–∏—Ç—å Dishka –∏—Ö —Å–æ–∑–¥–∞—Ç—å
    sentence_transformer = await container.get(SentenceTransformer)
    chunker = await container.get(HybridChunker)
    _ = sentence_transformer.encode(["—Ç–µ—Å—Ç–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"])
    print("‚úÖ –ú–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∏ chunker –ø—Ä–æ–≥—Ä–µ—Ç—ã!")
    